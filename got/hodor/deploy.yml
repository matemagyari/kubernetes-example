#Expose it internally
apiVersion: v1
kind: Service
metadata:
  name: hodor-service-internal
  labels:
    application: got
    app: hodor
spec:
  selector:
    app: hodor
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP

---
#Expose it externally
kind: Service
apiVersion: v1
metadata:
  name: hodor-service
  labels:
    application: got
    app: hodor
spec:
  selector:
    app: hodor
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hodor
  labels:
    app: hodor
    application: got
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hodor
  template:
    metadata:
      labels:
        app: hodor
        application: got
    spec:
      containers:
        - name: hodor
          image: hodor:v3
          ports:
            - name: nodejs-port
              containerPort: 80
            - name: http-port
              containerPort: 8080
          livenessProbe:
            httpGet:
              path: /
              port: http-port #not sure why not on the nodejs-port
            initialDelaySeconds: 2
            timeoutSeconds: 5
          readinessProbe: #if it fails the container won't be restarted, its ip is removed from Service
            httpGet:
              path: /
              port: http-port #not sure why not on the nodejs-port
            initialDelaySeconds: 2
            timeoutSeconds: 5

